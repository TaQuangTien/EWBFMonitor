/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gs.ewbfmonitor.vn;

import com.jsoniter.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.InvocationTargetException;
import java.util.Timer;
import java.util.TimerTask;
import java.net.URL;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import mslinks.ShellLink;


/**
 *
 * @author TIEN
 */
public class MainJFrame extends javax.swing.JFrame {
    public static String theRigURL = "";
    public static String theDBURL = "";
    public static int theInterval = 30;
    public static boolean isStartWin = false;
    public static boolean isEnable = false;
    public Timer timer;
    /**
     * Creates new form MainJFrame
     */
    
    public void LoadSettings(){        
        Preferences prefs = Preferences.userNodeForPackage(gs.ewbfmonitor.vn.MainJFrame.class);
        theRigURL = prefs.get("RigURL", "");
        theDBURL = prefs.get("DdURL", "");
        theInterval = prefs.getInt("Interval",30);
        isStartWin = prefs.getBoolean("StartWin", false);
        isEnable = prefs.getBoolean("Enable", false);
    }
    public void SaveSettings(){        
        Preferences prefs = Preferences.userNodeForPackage(gs.ewbfmonitor.vn.MainJFrame.class);
        prefs.put("RigURL", theRigURL);
        prefs.put("DdURL", theDBURL);
        prefs.putInt("Interval",theInterval);
        prefs.putBoolean("StartWin", isStartWin);
        prefs.putBoolean("Enable", isEnable);
    }
    
    public MainJFrame() {
        initComponents();
        LoadSettings();
        if (theRigURL != ""){
            jRigURL.setText(theRigURL);
        }
        if (theDBURL != ""){
            jDBURL.setText(theDBURL);
        }
        jUpdateInterval.setText(theInterval+"");
        if (isEnable){
            jCheckBoxEnable.setSelected(isEnable);
            scheduleTheTask();
        }
        if (isStartWin){
            jCheckBox_StartWin.setSelected(isStartWin);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel_Title = new javax.swing.JLabel();
        jCPU = new javax.swing.JLabel();
        jRigURL = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jDBURL = new javax.swing.JTextField();
        jCheckBox_StartWin = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jUpdateInterval = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jCheckBoxEnable = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextLog = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel_Title.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel_Title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_Title.setText("EWBF + GPU Monitor");

        jCPU.setText("EWBF Getstat URL");

        jRigURL.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jRigURLFocusLost(evt);
            }
        });
        jRigURL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRigURLActionPerformed(evt);
            }
        });

        jLabel1.setText("MySQL URL          ");

        jDBURL.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jDBURLFocusLost(evt);
            }
        });
        jDBURL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDBURLActionPerformed(evt);
            }
        });

        jCheckBox_StartWin.setText("Start with Windows");
        jCheckBox_StartWin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_StartWinActionPerformed(evt);
            }
        });

        jLabel2.setText("Update interval");

        jUpdateInterval.setText("30");
        jUpdateInterval.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jUpdateIntervalFocusLost(evt);
            }
        });
        jUpdateInterval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUpdateIntervalActionPerformed(evt);
            }
        });

        jLabel3.setText("(seconds)");

        jCheckBoxEnable.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jCheckBoxEnable.setText("Enable monitor");
        jCheckBoxEnable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxEnableActionPerformed(evt);
            }
        });

        jLabel4.setText("Log");

        jTextLog.setColumns(20);
        jTextLog.setRows(5);
        jScrollPane1.setViewportView(jTextLog);

        jLabel5.setText("Status:");

        jStatus.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jStatus.setForeground(new java.awt.Color(255, 0, 0));
        jStatus.setText("Stopped!");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel_Title, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCPU)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jDBURL)
                            .addComponent(jRigURL)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jUpdateInterval)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jStatus)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jCheckBox_StartWin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jCheckBoxEnable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel_Title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCPU)
                    .addComponent(jRigURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jDBURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox_StartWin)
                    .addComponent(jLabel2)
                    .addComponent(jUpdateInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxEnable)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jStatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jUpdateIntervalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUpdateIntervalActionPerformed
        // TODO add your handling code here:
       updateInterval();
    }//GEN-LAST:event_jUpdateIntervalActionPerformed

    private void jCheckBoxEnableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxEnableActionPerformed
        // TODO add your handling code here:
        if (jCheckBoxEnable.isSelected()){
            isEnable = true;
            SaveSettings();
            scheduleTheTask();
        }else{
            isEnable = false;            
            SaveSettings();
            if (timer != null)
                timer.cancel();
            setEditSetting(true);
            logMess("Monitor stopped");
            jStatus.setText("Stopped!");
            jStatus.setForeground(new java.awt.Color(255, 0, 0));
        }
    }//GEN-LAST:event_jCheckBoxEnableActionPerformed

    private void jRigURLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRigURLActionPerformed
        // TODO add your handling code here:
        updateRigURL();
    }//GEN-LAST:event_jRigURLActionPerformed

    void updateRigURL(){
        if (theRigURL.compareTo(jRigURL.getText()) != 0){
            theRigURL = jRigURL.getText();
            SaveSettings();
            logMess("EWBF URL Getstat URL updated to " + theRigURL);
        }
    }
    
    private void jDBURLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDBURLActionPerformed
        // TODO add your handling code here:
        updateDBURL();
    }//GEN-LAST:event_jDBURLActionPerformed

    void updateDBURL(){
        if (theDBURL.compareTo(jDBURL.getText()) != 0){
            theDBURL = jDBURL.getText();
            SaveSettings();
            logMess("MySQL URL updated to " + theDBURL);
        }
    }
    
    private void jRigURLFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jRigURLFocusLost
        // TODO add your handling code here:
        updateRigURL();
    }//GEN-LAST:event_jRigURLFocusLost

    private void jDBURLFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jDBURLFocusLost
        // TODO add your handling code here:
        updateDBURL();
    }//GEN-LAST:event_jDBURLFocusLost

    private void jUpdateIntervalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jUpdateIntervalFocusLost
        // TODO add your handling code here:
        updateInterval();
    }//GEN-LAST:event_jUpdateIntervalFocusLost

    void updateInterval(){
        String newIntervalStr = jUpdateInterval.getText();
        try{
            int newInterval = Integer.parseInt(newIntervalStr);
            if (newInterval != theInterval){
                theInterval = newInterval;
                SaveSettings();
                logMess("Update Interval updated to " + theInterval);
            }
        }catch(Exception e){
            jUpdateInterval.setText(theInterval + "");
        }
    }
    
    public void deleteStartUp(){
        File shortcut = new File(System.getenv("APPDATA")+"\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\StartEWBFMonitorShortcut.lnk");
        if (shortcut.exists()){
            shortcut.delete();
        }
        logMess("Startup with Windows cancled");
    }
    
    public void StartUp() throws FileNotFoundException, UnsupportedEncodingException, IOException{
       ShellLink.createLink(Paths.get("").toAbsolutePath().toString() + "\\StartEWBFMonitor.bat", System.getenv("APPDATA")+"\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\StartEWBFMonitorShortcut.lnk");
       logMess("Startup with Windows applied");
    }
    private void jCheckBox_StartWinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_StartWinActionPerformed
        // TODO add your handling code here:
        if (jCheckBox_StartWin.isSelected()){
            try {
            StartUp();
            isStartWin = true;
            SaveSettings();
            } catch (Exception e){
                logMess(e.getMessage());
            }
        }else{
            deleteStartUp();
                    isStartWin = false;
                    SaveSettings();
        }
    }//GEN-LAST:event_jCheckBox_StartWinActionPerformed
    public void logMess(String m){
        String timeStr = new SimpleDateFormat("dd/MM/yy HH:mm:ss").format(new Date());
        jTextLog.append(timeStr+" - "+m +".\n");
        jTextLog.setCaretPosition(jTextLog.getDocument().getLength());
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainJFrame mainJ = new MainJFrame();            
                mainJ.setVisible(true);                       
            }
        });
    }
    
    public RigStat getStats(String rigUrl){
        BufferedReader br = null;
	StringBuilder sb = new StringBuilder();        
        String rigData = "";
        InputStream is = null;
        try {
            is = new URL(rigUrl).openStream();
            br = new BufferedReader(new InputStreamReader(is));
            while ((rigData = br.readLine()) != null) {
		sb.append(rigData);
            }

	} catch (Exception e) {
            e.printStackTrace();
            logMess(e.getMessage());
	} finally {
            if (is != null)
                try {
                    is.close();
            } catch (IOException ex) {
                Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (br != null) {
                try {
                    br.close();
                } catch (Exception e) {
                    e.printStackTrace();
                    logMess(e.getMessage());
                }
            }
	}
        rigData = sb.toString();
        
        return JsonIterator.deserialize(rigData, RigStat.class);        
    }

    private void scheduleTheTask() {
        jStatus.setText("Connecting");
        jStatus.setForeground(new java.awt.Color(255, 204, 0));
        
        setEditSetting(false);
        timer = new Timer();
        timer.schedule(new RepeatTask(), 0, theInterval*1000);
    }
    
    public void setEditSetting(boolean allow){
        jDBURL.setEnabled(allow);
        jRigURL.setEnabled(allow);
        jUpdateInterval.setEnabled(allow);        
    }
    
    public class RepeatTask extends TimerTask{
        @Override
        public void run() {            
            List<InputStream> ListIS = new ArrayList<InputStream>();
            try{
                RigStat currentStat = getStats(theRigURL);
                if (currentStat != null){
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    String currentTime = sdf.format(new Date());
                    if (currentStat.result.length > 0){      
                        for (int i = 0; i < currentStat.result.length; i++){
                            String urlTemp= createURL(currentTime, currentStat.result[i]);
                            openURL(urlTemp);
                        }
                    }
                    logMess("Updated " + currentStat.getSummary());
                    jStatus.setText("Connected");
                    jStatus.setForeground(new java.awt.Color(38, 106, 46));                  
                }
            }catch (Exception e){
                logMess(e.getMessage());
            } finally {
//                for (int i = 0; i < ListIS.size(); i++){
//                    try {
//                        ListIS.get(i).close();
//                    } catch (IOException ex) {
//                        Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
//                    }
//                }
            }
        }        
    }
    
    
    
    public String createURL(String ctime, GPUStat stat){
            float speed = (float)stat.speed_sps;
            float pow = (float)stat.gpu_power_usage;
            float eff = speed/pow;
            String effStr = String.format("%.2f", eff);
            effStr = effStr.replace(',','.');
            String s = theDBURL + "poststat.php?date_time=" + ctime
                    + "&gpu_name=" +stat.name + " GPU"+ stat.cudaid + "&gpu_temp=" + stat.temperature
                    + "&gpu_power=" + stat.gpu_power_usage + "&gpu_speed=" + stat.speed_sps + "&gpu_efficient=" + effStr;
            s = s.replace(" ", "%20");
            return s;
    }
    
    public String openURL(String urlStr){
        InputStream is = null;
        String result = "";
        try {
            URL url = new URL(urlStr);
            is = url.openConnection().getInputStream();
            BufferedReader reader = new BufferedReader( new InputStreamReader( is )  );
            String line = null;
            while( ( line = reader.readLine() ) != null )  {
                result+=line;
            }   
            reader.close();
        } catch (IOException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                is.close();
            } catch (IOException ex) {
                Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return result;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jCPU;
    private javax.swing.JCheckBox jCheckBoxEnable;
    private javax.swing.JCheckBox jCheckBox_StartWin;
    private javax.swing.JTextField jDBURL;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel_Title;
    private javax.swing.JTextField jRigURL;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jStatus;
    private javax.swing.JTextArea jTextLog;
    private javax.swing.JTextField jUpdateInterval;
    // End of variables declaration//GEN-END:variables
}
